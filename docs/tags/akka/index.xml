<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Akka on doc site</title>
    <link>https://pureone-tcy.github.io/doc-site/tags/akka/</link>
    <description>Recent content in Akka on doc site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Aug 2018 08:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://pureone-tcy.github.io/doc-site/tags/akka/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Akka</title>
      <link>https://pureone-tcy.github.io/doc-site/posts/backend/akka/00002/</link>
      <pubDate>Tue, 28 Aug 2018 08:00:00 +0900</pubDate>
      
      <guid>https://pureone-tcy.github.io/doc-site/posts/backend/akka/00002/</guid>
      <description>サンプルコードのダウンロード https://github.com/akka-ja/akka-in-action
 sbtはインタプリタを持っている  Actorの4つの機能  create(生成) send/receive(送信/受信) become(状態変化) supervive(監督)     パッケージ 説明     akka.actor.{ActorSystem, Actor, Props} アクター関連のコード   akka.event.Logging ロギング拡張   akka.util.Timeout ask処理のタイムアウト   akka.http.scaladsl.Http~ HTTP関連のコード    package com.goticks import scala.concurrent.Future import akka.actor.ActorSystem import akka.event.Logging import akka.util.Timeout import akka.http.scaladsl.Http import akka.http.scaladsl.Http.ServerBinding import akka.stream.ActorMaterializer import com.typesafe.config.{ Config, ConfigFactory } import scala.util.{ Failure, Success } object Main extends App with RequestTimeout { val config = ConfigFactory.</description>
    </item>
    
    <item>
      <title>Akka</title>
      <link>https://pureone-tcy.github.io/doc-site/posts/backend/akka/00001/</link>
      <pubDate>Mon, 27 Aug 2018 08:00:00 +0900</pubDate>
      
      <guid>https://pureone-tcy.github.io/doc-site/posts/backend/akka/00001/</guid>
      <description>Akkaとは  並行・分散アプリケーションをシンプルに単一のモデルで実装するプログラミングモデルであるアクタープログラミングモデルを提供する アクターはスケールアップとスケールアウトのためのプログラミングモデル
  アクター概要  メッセージキューに似ている
 アクターは1通ずつメッセージを受信し、その都度何らかの振る舞いを実行する
 アクターは他のアクターにメッセージを送ることができる(キューとは異なる) 全て非同期 メッセージの送受信でアプリケーションを構築する メッセージは、ローカルスレッドまたは、リモートスレッド(別のサーバ)で処理する  リアクティブ (宣言)  ブロッキングI/Oは並列化を制限するため → ノンブロッキングI/O 同期処理は並列化を制限するため → 非同期 ポーリングはリソース消費機会を減らしてしまうため → イベント駆動 回復力(レジリエンス) 弾力性(需要が小さければリソース減、需要が大きければリソース増)  アクターシステム  Akkaのアプリケーションで最初に行うことはアクターシステムを作成すること アプリケーション内の全てのアクターに対してトップレベルアクターを１つだけ作成するのが一般的なパターン  val supervisor = ActorSystem(&amp;quot;TeamChat&amp;quot;)  ActorRefは、アクターにメッセージを送信するためのアドレス アクターシステム内でアクターを探したい場合はアクターパスを使う アクターパスはURLパス構造とアクターの階層をマッピングできる メッセージはActorRefに送信され、メールボックス（キュー）に到着順に保存する  ディスパッチャー アクターはディスパッチャーによってある時呼び出される ディスパッチャーはメールボックス内のメッセージをアクターにプッシュする アクターは落ちてきたメッセージを処理する 複数スレッドの場合は、複数のアクターが処理する
アクターにメッセージを送信するときは、メールボックスにメッセージを残すだけ ディスパッチャーがアクターにメッセージをプッシュする
並行処理の歴史  OSのプロセスによる並行処理 スレッドによる並行処理  並行と並列 CPUがどんな様子で処理をするのか？という観点において、 - 並行(Concurrent)
ある1つの時点で、複数タスクを切り替えることで同時処理を見せかけている - 並列(Pararell) ある1つの時点で、複数タスクを実際に(物理的に)同時処理している
プロセスとスレッド  プロセス</description>
    </item>
    
  </channel>
</rss>