<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on doc site</title>
    <link>https://pureone-t.github.io/doc-site/tags/scala/</link>
    <description>Recent content in Scala on doc site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Oct 2018 08:20:00 +0900</lastBuildDate>
    
	<atom:link href="https://pureone-t.github.io/doc-site/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala まとめ</title>
      <link>https://pureone-t.github.io/doc-site/posts/backend/scala/00005/</link>
      <pubDate>Mon, 22 Oct 2018 08:20:00 +0900</pubDate>
      
      <guid>https://pureone-t.github.io/doc-site/posts/backend/scala/00005/</guid>
      <description>object 用途  ユーティリティメソッド、グローバルなプロパティ値の置き場(equivalent of java static) 同名クラスのオブジェクトのファクトリメソッド  class SampleSuper(a: Int) class Sample(b: Int) extends SampleSuper(b) object SampleSuper { def apply(c: Int): SampleSuper = new Sample(c) } object Sample { def apply(c: Int): SampleSuper = new Sample(c) }  new クラス名による直接的なオブジェクト生成よりも、実装の詳細を隠蔽できる（インターフェースのみ公開） サブクラスのインスタンスを返却することもできる  コンパニオンオブジェクト  クラスと同じファイル内に、同じ名前で定義されたオブジェクト（シングルトン）のこと  trait 抽象メンバーの上書き trait TraitA { val name: String def printName: String = println(name) } class ClassA(val name: String) extends TraitA トレイとをミックスインしたクラスのコンストラクタで、抽象メンバー name をオーバーライドしている。</description>
    </item>
    
    <item>
      <title>Atom &#43; ensime で Scala 開発環境を構築する</title>
      <link>https://pureone-t.github.io/doc-site/posts/backend/scala/00004/</link>
      <pubDate>Wed, 17 Oct 2018 11:50:00 +0900</pubDate>
      
      <guid>https://pureone-t.github.io/doc-site/posts/backend/scala/00004/</guid>
      <description> Atom Editor パッケージのインストール  language-scala Ensime setting -&amp;gt; Sbt Exec = /usr/local/bin/sbt  sbtのプラグイン設定 $ vi ~/.sbt/1.0/plugins/plugins.sbt addSbtPlugin(&amp;quot;org.ensime&amp;quot; % &amp;quot;sbt-ensime&amp;quot; % &amp;quot;2.5.1&amp;quot;)  global設定の追加 $ vi ~/.sbt/1.0/global.sbt import org.ensime.EnsimeKeys._ ensimeIgnoreMissingDirectories := true  ローカルプロジェクトより設定を読み込む プロジェクトのルートで以下を実行
$ cd ~/PROJECT_ROOT $ sbt ensimeConfig  ensime start  プロジェクトを開いて、 command + shift + p command + shift + p ensime start  エラーが発生した場合  ensime パッケージを Atom からアンインストール $ apm install ensime/ensime-atom Atom 再起動 プロジェクトを開いて、 command + shift + p ensime start  </description>
    </item>
    
    <item>
      <title>Scala Test</title>
      <link>https://pureone-t.github.io/doc-site/posts/backend/scala/00003/</link>
      <pubDate>Wed, 10 Oct 2018 14:30:00 +0900</pubDate>
      
      <guid>https://pureone-t.github.io/doc-site/posts/backend/scala/00003/</guid>
      <description>Property Based Testing テストデータを半自動生成する
Mastering flatMap ! flatten と map が、同時に行われるのが flatMap - map -&amp;gt; flatten
Seq(Seq(1,2,3), Seq(), Seq(5.6)).flatten(identity) // List(1, 2, 3, 5.6): scala.collection.Seq Seq(Seq(1,2,3), Seq(), Seq(5.6)).flatMap(identity) // List(1, 2, 3, 5.6): scala.collection.Seq Seq(Seq(1,2,3), Seq(), Seq(5.6)).map(identity) // List(List(1, 2, 3), List(), List(5.6)): scala.collection.SeqSeq(Seq(1,2,3), Seq(), Seq(5.6)) flatten { x =&amp;gt; x.size } // コンパイルエラー Seq(Seq(1,2,3), Seq(), Seq(5.6)) flatMap { x =&amp;gt; x.size } // コンパイルエラー Seq(Seq(1,2,3), Seq(), Seq(5.6)) map { x =&amp;gt; x.</description>
    </item>
    
    <item>
      <title>Akka</title>
      <link>https://pureone-t.github.io/doc-site/posts/backend/akka/00002/</link>
      <pubDate>Tue, 28 Aug 2018 08:00:00 +0900</pubDate>
      
      <guid>https://pureone-t.github.io/doc-site/posts/backend/akka/00002/</guid>
      <description>サンプルコードのダウンロード https://github.com/akka-ja/akka-in-action
 sbtはインタプリタを持っている  Actorの4つの機能  create(生成) send/receive(送信/受信) become(状態変化) supervive(監督)     パッケージ 説明     akka.actor.{ActorSystem, Actor, Props} アクター関連のコード   akka.event.Logging ロギング拡張   akka.util.Timeout ask処理のタイムアウト   akka.http.scaladsl.Http~ HTTP関連のコード    package com.goticks import scala.concurrent.Future import akka.actor.ActorSystem import akka.event.Logging import akka.util.Timeout import akka.http.scaladsl.Http import akka.http.scaladsl.Http.ServerBinding import akka.stream.ActorMaterializer import com.typesafe.config.{ Config, ConfigFactory } import scala.util.{ Failure, Success } object Main extends App with RequestTimeout { val config = ConfigFactory.</description>
    </item>
    
    <item>
      <title>Akka</title>
      <link>https://pureone-t.github.io/doc-site/posts/backend/akka/00001/</link>
      <pubDate>Mon, 27 Aug 2018 08:00:00 +0900</pubDate>
      
      <guid>https://pureone-t.github.io/doc-site/posts/backend/akka/00001/</guid>
      <description>  sample code
https://github.com/akka-ja/akka-in-action  Akkaとは  並行・分散アプリケーションをシンプルに単一のモデルで実装するプログラミングモデルであるアクタープログラミングモデルを提供する アクターはスケールアップとスケールアウトのためのプログラミングモデル
アクター概要 メッセージキューに似ている
 アクターは1通ずつメッセージを受信し、その都度何らかの振る舞いを実行する
 アクターは他のアクターにメッセージを送ることができる(キューとは異なる)
 全て非同期 =&amp;gt; メッセージの送受信でアプリケーションを構築する =&amp;gt; メッセージは、ローカルスレッドまたは、リモートスレッド(別のサーバ)で処理する
  (補足 )リアクティブ宣言
アクターシステム Akkaのアプリケーションで最初に行うことはアクターシステムを作成すること アプリケーション内の全てのアクターに対してトップレベルアクターを１つだけ作成するのが一般的なパターン
val supervisor = ActorSystem(&amp;quot;TeamChat&amp;quot;)  ActorRefは、アクターにメッセージを送信するためのアドレス アクターシステム内でアクターを探したい場合はアクターパスを使う アクターパスはURLパス構造とアクターの階層をマッピングできる メッセージはActorRefに送信され、メールボックス（キュー）に到着順に保存する
ディスパッチャー アクターはディスパッチャーによってある時呼び出される ディスパッチャーはメールボックス内のメッセージをアクターにプッシュする アクターは落ちてきたメッセージを処理する 複数スレッドの場合は、複数のアクターが処理する
アクターにメッセージを送信するときは、メールボックスにメッセージを残すだけ ディスパッチャーがアクターにメッセージをプッシュする
用語 並行と並列 CPUがどんな様子で処理をするのか？という観点において、 - 並行(Concurrent)
ある1つの時点で、複数タスクを切り替えることで同時処理を見せかけている - 並列(Pararell) ある1つの時点で、複数タスクを実際に(物理的に)同時処理している
プロセスとスレッド  プロセス
実行プログラムは親プロセスと共有し、実行状態(変数など)は子プロセス独自に割り当てられたメモリ領域を使う スレッド // TODO  スケールアウト スケーリング クラスタリング フェイルオーバー  稼働中のシステムで問題が生じてシステムやサーバーが停止してしまった際に、自動的に待機システムに切り替える仕組みをいいます。HA機能ともいわれ、システムの可用性を高めるための冗長化の一つです。 // TODO  </description>
    </item>
    
    <item>
      <title>Scala環境構築（VM）</title>
      <link>https://pureone-t.github.io/doc-site/posts/backend/scala/00002/</link>
      <pubDate>Tue, 24 Jul 2018 11:13:00 +0900</pubDate>
      
      <guid>https://pureone-t.github.io/doc-site/posts/backend/scala/00002/</guid>
      <description>前提  vagrant導入済（vagrat導入手順） FTPクライアントの導入（cyber）  仮想環境のメモリ増設 $ vi Vagrantfile config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb| # # Display the VirtualBox GUI when booting the machine # vb.gui = true # # # Customize the amount of memory on the VM: vb.memory = &amp;quot;2048&amp;quot; end $ vagrant reload  javaのインストール $ sudo yum -y install java-1.8.0-openjdk-devel
sbtの導入  公式サイトのドキュメントより、インストール方法を参照する。
 https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html  $ curl https://bintray.com/sbt/rpm/rpm | sudo tee /etc/yum.repos.d/bintray-sbt-rpm.repo $ sudo yum install sbt    $ sbt sbt-version Getting org.</description>
    </item>
    
  </channel>
</rss>